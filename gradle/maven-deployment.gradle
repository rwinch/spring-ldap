apply plugin: 'maven'

install {
    customizePom(repositories.mavenInstaller.pom, project)
}

def customizePom(pom, gradleProject) {
    def isWar = project.hasProperty('war')
    def projectName = gradleProject.name

    pom.whenConfigured { p ->
        p.dependencies.findAll{ it.scope == "optional" }.each {
            it.scope = "compile"
            it.optional = true
        }
        // sort to make pom dependencies order consistent to ease comparison of older poms
        p.dependencies = p.dependencies.sort { dep ->
            "$dep.scope:$dep.optional:$dep.groupId:$dep.artifactId"
        }
    }

    pom.project {
        name = projectName
        if(isWar) {
            packaging = "war"
        }
        description = gradleProject.name
        url = 'http://www.springframework.org/ldap'
        organization {
            name = 'SpringSource'
            url = 'http://springsource.org/'
        }
        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }
        scm {
            url = 'https://github.com/SpringSource/spring-ldap'
            connection = 'scm:git:git://github.com/SpringSource/spring-ldap'
            developerConnection = 'scm:git:git://github.com/SpringSource/spring-ldap'
        }
        developers {
            developer {
                id = 'rwinch'
                name = 'Rob Winch'
                email = 'rwinch@gopivotal.com'
            }
            developer {
                id = "marthursson"
                name = "Mattias Hellborg Arthursson"
                email = "mattias@261consulting.com"
                organization = "261 Consulting"
                organizationUrl = "http://www.261consulting.com"
            }
            developer {
                id = "ulsa"
                name = "Ulrik Sandberg"
                email = "ulrik.sandberg@jayway.com"
                organization = "Jayway"
                organizationUrl = "http://www.jayway.com"
            }
        }
        contributors {
            contributor {
                name = "Eric Dalquist"
            }
            contributor {
                name = "Marius Scurtescu"
            }
            contributor {
                name = "Tim Terry"
            }
            contributor {
                name = "Keith Barlow"
            }
            contributor {
                name = "Paul Harvey"
            }
            contributor {
                name = "Marvin S. Addison"
            }
        }

        if(!project.releaseBuild) {
            repositories {
                repository {
                    id 'spring-snasphot'
                    url 'http://repo.springsource.org/libs-snapshot'
                }
            }
        }
    }

    // http://forums.gradle.org/gradle/topics/after_upgrade_gradle_to_2_0_version_the_maven_pom_not_support_build_property
    pom.withXml {
        def plugins = asNode().appendNode('build').appendNode('plugins')
        plugins
            .appendNode('plugin')
                .appendNode('artifactId','maven-compiler-plugin').parent()
                .appendNode('configuration')
                    .appendNode('source', '1.6').parent()
                    .appendNode('target','1.6')

        if(isWar) {
            plugins
                .appendNode('plugin')
                    .appendNode('artifactId','maven-war-plugin').parent()
                    .appendNode('version','2.3').parent()
                    .appendNode('configuration')
                        .appendNode('failOnMissingWebXml','false')
            plugins
                    .appendNode('plugin')
                    .appendNode('groupId','org.mortbay.jetty').parent()
                    .appendNode('artifactId','jetty-maven-plugin').parent()
                    .appendNode('version','8.1.14.v20131031').parent()
                    .appendNode('configuration')
                    .appendNode('webAppConfig')
                    .appendNode('contextPath',"/" + projectName)
        }
    }
}

task generatePom {
    group = 'Build'
    description = 'Generates the Maven pom.xml'

    ext.generatedPomFileName = 'pom.xml'

    inputs.files('**/*.gradle')
    outputs.files(generatedPomFileName)

    doLast() {
        def p = pom {}
        customizePom(p, project)
        p.writeTo(generatedPomFileName)
    }

}